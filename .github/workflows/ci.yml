name: ci

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
 
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
 
      - name: Install Package for Testing
        run: |
          pip install --upgrade pip wheel setuptools
          pip install .[test]
 
      - name: Build Distribution and Install from Dist
        shell: bash
        run: |
          make build
          pip install dist/gdown-*.tar.gz
          pip install dist/gdown-*.whl
 
      - name: Install PyInstaller (Windows only)
        if: matrix.os == 'windows-latest'
        run: pip install pyinstaller
 
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --name gdown.exe gdownpython.py
          dir dist
 
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdown-artifacts-${{ matrix.os }}
          path: "./dist/*"

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download the Windows build artifact into ./dist/
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: gdown-artifacts-windows-latest
          path: "./dist/"

      # Flatten the directory structure if the artifact was extracted into a subfolder.
      - name: Flatten artifact directory
        run: |
          if [ -d "./dist/gdown-artifacts-windows-latest" ]; then
            mv ./dist/gdown-artifacts-windows-latest/* ./dist/
            rm -r ./dist/gdown-artifacts-windows-latest
          fi

      - name: Create Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "v${{ github.run_number }}"
          git push origin "v${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Create Release
        uses: elgohr/Github-Release-Action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: "v${{ github.run_number }}"
          title: "Release v${{ github.run_number }}"
          prerelease: "false"
